name: docker

on:
  push:
    branches:
      - 'main'
      - 'staging'
      - 'develop'

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: yingxuan-docker.pkg.coding.net/1024/paas/frontend
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
          flavor: |
            latest=auto
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          #registry: ghcr.io
          #username: ${{ github.actor }}
          #password: ${{ secrets.GITHUB_TOKEN }}
          registry:  yingxuan-docker.pkg.coding.net
          username: ${{ secrets.CODING_USER }}
          password: ${{ secrets.CODING_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        if: github.ref == 'refs/heads/develop'
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            "DOCKER_ENV=develop"
      -
        name: Build and push
        uses: docker/build-push-action@v2
        if: github.ref == 'refs/heads/staging'
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            "DOCKER_ENV=staging"

      # -
      #   name: Publish NPM
      #   run: |
      #     npm version patch
      #     npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
      #     npm publish --ignore-scripts
      #   env:
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          # cd packages\/client
        # run: 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
      -
        name: Deploy Develop
        uses: appleboy/ssh-action@master
        if: github.ref == 'refs/heads/develop'
        with:
          host: develop.1024paas.com
          username: paas
          key: ${{ secrets.DEVELOP_SSH_KEY }}
          script_stop: true
          script: |
            docker image prune --filter="dangling=true" -f
            docker-compose pull -q frontend
            docker-compose up -d
      -
        name: Webhook supporting
        if: github.ref == 'refs/heads/develop'
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: >-
          curl 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=b6e441d3-151d-4855-ac8b-33d694ea01be'
          -H 'Content-Type: application/json'
          -d '{"msgtype": "text","text": {"content": "Develop PaaS IDE Server 已部署"}'

      -
        name: Deploy Staging
        uses: appleboy/ssh-action@master
        if: github.ref == 'refs/heads/staging'
        with:
          host: s1.staging.1024paas.com
          username: paas
          key: ${{ secrets.STAGING_SSH_KEY }}
          script_stop: true
          script: |
            ./update.sh frontend_frontend ${{ github.sha }}

